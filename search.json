[{"path":"https://nelstevens.github.io/daphniaRuler/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 Nelson Stevens Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://nelstevens.github.io/daphniaRuler/articles/measure_single_image.html","id":"load-the-package","dir":"Articles","previous_headings":"","what":"1. Load the package","title":"Measure single images","text":"error messages loading package. case experience issues see: tbd.","code":"library(daphniaruler) #> Trying to find python... #> Trying to find conda environment 'daphniaRuler' #> Activating conda environment 'daphniaruler' #> done... have fun"},{"path":"https://nelstevens.github.io/daphniaRuler/articles/measure_single_image.html","id":"run-measure_image","dir":"Articles","previous_headings":"","what":"2. run measure_image","title":"Measure single images","text":"Run function measure_image. function requires single argument, path image. path can either absolute relative. function also comes two optional arguments: find_eye plot_image find_eye expects logical value (either TRUE FALSE). TRUE package try detect eye daphnia within image. successful measurement eye base tail additionally line base tail tip tail. accurate way measure body size daphnia. plot_image also expects logical value (either TRUE FALSE). TRUE function autmatically create plot image measurements overplotted. Note feature might work using rstudio. ’s example function produces optional arguments set TRUE (’m disabling output image array due space constraints):","code":"out <- measure_image(   \"../inst/sample_images/example1.JPG\",   find_eye = TRUE,   plot_image = TRUE   ) out[names(out) != \"image\"] #> $ID #> [1] \"sample_images/example1.JPG\" #>  #> $perimeter #> [1] 1038.189 #>  #> $area #> [1] 65656.89 #>  #> $minor #> [1] 207.7907 #>  #> $solidity #> [1] 0.9870644 #>  #> $full.Length #> [1] 406.9933 #>  #> $tail.Length #> [1] 124.5079 #>  #> $eye.Length #> [1] 354.1952 #>  #> $tail.angle #> [1] 159.6364"},{"path":"https://nelstevens.github.io/daphniaRuler/articles/measure_single_image.html","id":"what-should-the-image-look-like","dir":"Articles","previous_headings":"","what":"What should the image look like","title":"Measure single images","text":"image ideally contains single individual. individuals also present image largest individual measured. optimal results try make image sharp possible. Especially outline specimen clearly visible.","code":""},{"path":"https://nelstevens.github.io/daphniaRuler/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Nelson Stevens. Maintainer.","code":""},{"path":"https://nelstevens.github.io/daphniaRuler/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Stevens N (2022). daphniaruler: Measure morphometric traits zooplankton images. R package version 0.1.0, https://nelstevens.github.io/daphniaRuler.","code":"@Manual{,   title = {daphniaruler: Measure morphometric traits of zooplankton from images},   author = {Nelson Stevens},   year = {2022},   note = {R package version 0.1.0},   url = {https://nelstevens.github.io/daphniaRuler}, }"},{"path":"https://nelstevens.github.io/daphniaRuler/index.html","id":"daphniaruler-","dir":"","previous_headings":"","what":"Measure morphometric traits of zooplankton from images","title":"Measure morphometric traits of zooplankton from images","text":"Automatically collect morphometric traits Daphnia zooplankton species leveraging python. Simply take images individual specimen point daphniaruler towards single image directory images.","code":""},{"path":"https://nelstevens.github.io/daphniaRuler/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Measure morphometric traits of zooplankton from images","text":"can install daphnia ruler via github using remotes:","code":"remotes::install_github(\"nelstevens/daphniaRuler\")"},{"path":"https://nelstevens.github.io/daphniaRuler/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Measure morphometric traits of zooplankton from images","text":"detailed usage see: https://nelstevens.github.io/daphniaRuler/","code":""},{"path":"https://nelstevens.github.io/daphniaRuler/index.html","id":"measure-single-images","dir":"","previous_headings":"Usage","what":"Measure single images:","title":"Measure morphometric traits of zooplankton from images","text":"daphniaruler output list measured traits plot measurements image.","code":"library(daphniaruler) measure_image(\"path/to/image\")"},{"path":[]},{"path":"https://nelstevens.github.io/daphniaRuler/reference/measure_directory.html","id":null,"dir":"Reference","previous_headings":"","what":"measure all images in a directory — measure_directory","title":"measure all images in a directory — measure_directory","text":"measure images directory","code":""},{"path":"https://nelstevens.github.io/daphniaRuler/reference/measure_directory.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"measure all images in a directory — measure_directory","text":"","code":"measure_directory(   path = \"C:/Users/Nelson/Desktop/test_dr/test_images\",   write_images = TRUE,   eye_method = TRUE )"},{"path":"https://nelstevens.github.io/daphniaRuler/reference/measure_directory.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"measure all images in a directory — measure_directory","text":"path path directory write_images write images png? boolean eye_method use eye method possible? boolean","code":""},{"path":"https://nelstevens.github.io/daphniaRuler/reference/measure_image.html","id":null,"dir":"Reference","previous_headings":"","what":"Measure morphometric traits of a single image — measure_image","title":"Measure morphometric traits of a single image — measure_image","text":"Measure morphometric traits single image","code":""},{"path":"https://nelstevens.github.io/daphniaRuler/reference/measure_image.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Measure morphometric traits of a single image — measure_image","text":"","code":"measure_image(   path = system.file(\"inst/sample_images/example1.JPG\", package = \"daphniaruler\"),   find_eye = TRUE,   plot_image = TRUE )"},{"path":"https://nelstevens.github.io/daphniaRuler/reference/measure_image.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Measure morphometric traits of a single image — measure_image","text":"path path image either absolute relative find_eye try find eye daphnia? eye found automatically falls back outline measurement. boolean plot_image whether plot resulting image. boolean","code":""},{"path":"https://nelstevens.github.io/daphniaRuler/reference/measure_image.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Measure morphometric traits of a single image — measure_image","text":"","code":"if (FALSE) { measure_image(\"path/to/image\") }"}]
